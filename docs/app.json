[{"name":"app.R","content":"#\r\n# This is a Shiny web application. You can run the application by clicking\r\n# the 'Run App' button above.\r\n#\r\n# Find out more about building applications with Shiny here:\r\n#\r\n#    http://shiny.rstudio.com/\r\n#\r\n\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(sf)\r\nlibrary(leaflet)\r\nlibrary(shiny)\r\nlibrary(shinylive)\r\nlibrary(DT)\r\n\r\n\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n\r\n    # Application title\r\n    titlePanel(\"DVRPC Crash Data by Municipality, 2008 - 2020\"),\r\n\r\n    # Sidebar with a slider input for number of bins \r\n    sidebarLayout(\r\n        sidebarPanel(\r\n          column(\r\n            width = 3,\r\n            br(),\r\n            actionButton(\r\n              \"select_all_rows_button\",\r\n              \"Select All Table Rows\"\r\n            ),\r\n            br(),\r\n            actionButton(\r\n              \"clear_rows_button\",\r\n              \"Clear Table Selections\"\r\n            )\r\n          ),\r\n            \r\n          leafletOutput('map', width = \"100%\", height = 400)\r\n          ),\r\n\r\n        # Show a plot of the generated distribution\r\n        mainPanel(\r\n          \r\n            column(9, DTOutput('tbl')),\r\n            \r\n          \r\n          \r\n        )\r\n    )\r\n)\r\n\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output) {\r\n  \r\n  ## download data on app refresh\r\n  crash_data <- read_csv(\"https://catalog.dvrpc.org/dataset/916c9fc4-c0c9-4d70-98f6-bd7f76e594b1/resource/ce75c010-3a79-4a67-b7b6-0e16fb83edaf/download/crash_summary_08_20.csv\")\r\n  mcd_sf <- read_sf(\"https://arcgis.dvrpc.org/portal/rest/services/Demographics/Forecast_2015to2050_MCD/FeatureServer/0/query?where=1=1&outsr=4326&outfields=*&f=geojson\")\r\n  \r\n  mcd_sf <- mcd_sf %>% mutate(\r\n    geoid = geoid %>% as.numeric()\r\n  )\r\n  \r\n  ## group by muni and generate summary statistics \r\n  \r\n  years <- unique(crash_data$`Crash Year`)\r\n  \r\n  tab1 <- crash_data %>% group_by(`MCD Name`, `GEOID10`) %>%\r\n    summarise(avg_annual_crashes = round(mean(`TOTAL CRASH`),0),\r\n              min = paste0(min(`TOTAL CRASH`),\r\n                           \" (\",\r\n                           years[which.min(`TOTAL CRASH`)],\r\n                           \")\"),\r\n              max = paste0(max(`TOTAL CRASH`),\r\n                           \" (\",\r\n                           years[which.max(`TOTAL CRASH`)],\r\n                           \")\")\r\n    ) %>% ungroup()\r\n  \r\n  \r\n  ## give geometr, calc per capita stats, and prepare for shiny\r\n  muni_table <- left_join(tab1, mcd_sf %>% select(geoid, pop20),\r\n                          by =c(\"GEOID10\"=\"geoid\")) %>% st_as_sf() %>%\r\n    mutate(\r\n    id = row_number(),\r\n    avg_annual_crash_per_1000 = round(1000*(avg_annual_crashes/pop20),0)\r\n  )  \r\n  \r\n    \r\n    muni_table1 <- reactive({ muni_table })\r\n    pal<-colorNumeric(\"viridis\", muni_table$avg_annual_crashes)\r\n\r\n    \r\n    ### TABLE CODE\r\n    output$tbl <- renderDT({\r\n      muni_table1() %>% st_drop_geometry() %>%\r\n        select(-c('GEOID10', 'id')) %>% datatable()\r\n      \r\n    })\r\n    \r\n      \r\n    ### MAP Init\r\n    output$map <- renderLeaflet({\r\n      \r\n      leaflet() %>% addProviderTiles(providers$CartoDB.Voyager) %>%\r\n        setView(lng = -75.161802, lat = 39.957673, zoom = 11)\r\n    })\r\n    \r\n    ### Observe muni select in table\r\n    observeEvent(input$tbl_rows_selected, {\r\n      \r\n      selected_munis <- eventReactive(input$tbl_rows_selected, {\r\n        muni_table1() %>% filter(id %in% input$tbl_rows_selected)\r\n      })\r\n      \r\n      \r\n      # output$txt = renderPrint({\r\n      #   selected_munis()\r\n      # })\r\n      \r\n      leafletProxy(\"map\") %>% \r\n            #clear() %>%\r\n            addPolygons(\r\n              data = selected_munis(),\r\n              fillColor = ~pal(selected_munis()$avg_annual_crashes),\r\n              stroke = TRUE,\r\n              color = \"white\",\r\n              weight = 1,\r\n              fillOpacity = 0.4,\r\n              popup = ~paste0('<strong>',`MCD Name`,'<\/strong>', \"<br>\", avg_annual_crashes, \" Crashes per 1000 Residents\")\r\n            )\r\n    })\r\n\r\n\r\n    # create a proxy to modify datatable without recreating it completely\r\n    DT_proxy <- dataTableProxy(\"tbl\")\r\n    # clear row selections when clear_rows_button is clicked\r\n    observeEvent(input$clear_rows_button, {\r\n      selectRows(DT_proxy, NULL)\r\n    })\r\n\r\n    # clear markers from leaflet when clear_rows_button is clicked\r\n    observeEvent(input$clear_rows_button, {\r\n      clearShapes(leafletProxy(\"map\"))\r\n    })\r\n\r\n    # select all rows when select_all_rows_button is clicked\r\n    observeEvent(input$select_all_rows_button, {\r\n      selectRows(DT_proxy, input$tbl_rows_all)\r\n    })\r\n\r\n    \r\n    \r\n    # setView(lng = -75.161802, lat = 39.957673, zoom = 11) %>%\r\n    #   addPolygons(\r\n    #     data = crash1y,\r\n    #     fillColor =  ~pal(`TOTAL CRASH`),\r\n    #     color = \"lightgrey\",\r\n    #     weight = 1,\r\n    #     fillOpacity = 0.8,\r\n    #     highlight = highlightOptions(\r\n    #       weight = 2,\r\n    #       color = \"black\",\r\n    #       fillOpacity = 0.8\r\n    #     ),\r\n    #     popup = ~htmlEscape(`MCD Name`)) \r\n    # crash1y<-crash_sf %>% filter(`Crash Year` == input$year)\r\n    # pal<-colorNumeric(\"viridis\", crash1y$`TOTAL CRASH`)\r\n    \r\n    \r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
